head(merge.df)
ggplot(merge.df, aes(x=values))
+ geom_histogram(binwidth=10) + ggtitle("InDel frequency") + facet_grid(key~.)
library(ggplot2)
ggplot(merge.df, aes(x=values))
+ geom_histogram(binwidth=10) + ggtitle("InDel frequency") + facet_grid(key~.)
ggplot(merge.df, aes(x=values)) + geom_histogram(binwidth=10) + ggtitle("InDel frequency") + facet_grid(key~.)
data_list
kim.df<-data.frame()
for(i in 1:2){
df<-data.frame(key=strsplit(data_list[i],"\\.")[[1]][1], values=data_files[[i]]$sgRNA.efficiency)
kim.df<-rbind(df, kim.df)
}
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=10) + ggtitle("InDel frequency") + facet_grid(key~.)
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_grid(key~.)
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_grid(key~.)
ggsave(file = paste(data_path,"kim_indelfreq.png", sep=""))
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_grid(key~.)
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""))
result_path<-"/home/kwlee/Projects_gflas/Team_BI/Projects/1.Knockout_project/Data/Results/ver11"
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""))
getwd()
paste(result_path,"kim_indelfreq.png", sep="")
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_grid(key~.)
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""))
paste(result_path,"kim_indelfreq.png", sep="")
result_path<-"/home/kwlee/Projects_gflas/Team_BI/Projects/1.Knockout_project/Data/Results/ver11/"
paste(result_path,"kim_indelfreq.png", sep="")
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""))
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_grid(key~., ncol=2)
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""))
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_grid(key~.)
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""))
ggplot(wang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_grid(key~.)
ggsave(file = paste(result_path,"wang_indelfreq.png", sep=""))
ggplot(xiang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_grid(key~.)
ggsave(file = paste(result_path,"xiang_indelfreq.png", sep=""))
wang.df
wang.df
wang.df<-data.frame()
for(i in 3:5){
df<-data.frame(key=strsplit(data_list[i],"\\.")[[1]][1], values=data_files[[i]]$sgRNA.efficiency)
wang.df<-rbind(df, wang.df)
}
ggplot(wang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_grid(key~.)
ggsave(file = paste(result_path,"wang_indelfreq.png", sep=""))
ggplot(wang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_grid(key~., ncol=2)
ggsave(file = paste(result_path,"wang_indelfreq.png", sep=""))
ggplot(wang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_wrap(key~., ncol=2)
ggsave(file = paste(result_path,"wang_indelfreq.png", sep=""))
kim.df<-data.frame()
for(i in 1:2){
df<-data.frame(key=strsplit(data_list[i],"\\.")[[1]][1], values=data_files[[i]]$sgRNA.efficiency)
kim.df<-rbind(df, kim.df)
}
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_wrap(key~., ncol=2)
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""))
wang.df<-data.frame()
for(i in 3:5){
df<-data.frame(key=strsplit(data_list[i],"\\.")[[1]][1], values=data_files[[i]]$sgRNA.efficiency)
wang.df<-rbind(df, wang.df)
}
ggplot(wang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_wrap(key~., ncol=3)
ggsave(file = paste(result_path,"wang_indelfreq.png", sep=""))
xiang.df<-data.frame()
for(i in 6:8){
df<-data.frame(key=strsplit(data_list[i],"\\.")[[1]][1], values=data_files[[i]]$sgRNA.efficiency)
xiang.df<-rbind(df, xiang.df)
}
ggplot(xiang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_wrap(key~., ncol=3)
ggsave(file = paste(result_path,"xiang_indelfreq.png", sep=""))
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_wrap(key~., ncol=2)
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""), width=5, height=5, res=300)
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""), width=5, height=5)
ggplot(kim.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0)+ggtitle("InDel frequency") + facet_wrap(key~., ncol=2)
ggsave(file = paste(result_path,"kim_indelfreq.png", sep=""), width=20, height=10, dpi=300)
ggplot(wang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_wrap(key~., ncol=3)
ggsave(file = paste(result_path,"wang_indelfreq.png", sep=""), width=20, height=10, dpi=300)
ggplot(xiang.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency") + facet_wrap(key~., ncol=3)
ggsave(file = paste(result_path,"xiang_indelfreq.png", sep=""), width=20, height=10, dpi=300)
file_list
data_list
##################################################################################################################################
merged_path="/home/kwlee/Projects_gflas/Team_BI/Projects/1.Knockout_project/Data/Finalsets/Merged_data/Merged_Cas9.scaled.tsv"
merged_file<-read.delim(merged_path, header = T, sep = "\t",stringsAsFactors = F)
merged.df<-data.frame(key="Scaled_data",values = merged_file$sgRNA.efficiency)
ggplot(merged.df, aes(x=values)) + geom_histogram(binwidth=5, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency")
ggsave(file = paste(result_path,"Merged_indelfreq.png", sep=""), width=20, height=10, dpi=300)
merged_df
merged.df
hist(merged.df$values)
ggplot(merged.df, aes(x=values)) + geom_histogram(binwidth=0.05, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency")
merged_path="/home/kwlee/Projects_gflas/Team_BI/Projects/1.Knockout_project/Data/Finalsets/Merged_data/Merged_Cas9.scaled.tsv"
merged_file<-read.delim(merged_path, header = T, sep = "\t",stringsAsFactors = F)
merged.df<-data.frame(key="Scaled_data",values = merged_file$sgRNA.efficiency)
ggplot(merged.df, aes(x=values)) + geom_histogram(binwidth=0.05, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency")
ggsave(file = paste(result_path,"Merged_indelfreq.png", sep=""), width=20, height=10, dpi=300)
library(ggplot2)
merged_path="/home/kwlee/Projects_gflas/Team_BI/Projects/1.Knockout_project/Data/Finalsets/Merged_data/Merged_Cas9.scaled.tsv"
merged_file<-read.delim(merged_path, header = T, sep = "\t",stringsAsFactors = F)
merged.df<-data.frame(key="Scaled_data",values = merged_file$sgRNA.efficiency)
ggplot(merged.df, aes(x=values)) + geom_histogram(binwidth=0.05, fill="blue", colour="white", alpha=0.5) + geom_density(fill=NA, colour=NA, alpha=0.8) + geom_line(stat="density")+expand_limits(y=0) + ggtitle("InDel frequency")
ggsave(file = paste(result_path,"Merged_indelfreq.png", sep=""), width=20, height=10, dpi=300)
wt<-read.delim(file.path(dir,"Cas9_wt_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)
#data summary
dir<-"/home/kwlee/Projects_gflas/Team_BI/Projects/1.Knockout_project/Data/Finalsets/Raw_data"
wt<-read.delim(file.path(dir,"Cas9_wt_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)
View(wt)
esp<-read.delim(file.path(dir,"Cas9_esp_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)
HF1<-read.delim(file.path(dir,"Cas9_HF1_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)
wt<-read.delim(file.path(dir,"Cas9_wt_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)[c(4,14),]
View(wt)
wt<-read.delim(file.path(dir,"Cas9_wt_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)[,c(4,14)]
View(wt)
wt<-read.delim(file.path(dir,"Cas9_wt_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)[,c(4,14)]
esp<-read.delim(file.path(dir,"Cas9_esp_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)[,c(4,14)]
HF1<-read.delim(file.path(dir,"Cas9_HF1_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)[,c(4,14)]
sort(wt$sgRNA.efficiency)
rank(wt$sgRNA.efficiency)
order(wt$sgRNA.efficiency, decreasing = T)
wt[order(wt$sgRNA.efficiency, decreasing = T),]
c(1:46410)
wt<-wt[order(wt$sgRNA.efficiency, decreasing = T),]
wt
rank(wt$sgRNA.efficiency)
rank(wt$sgRNA.efficiency, decreasing=T)
rank(-wt$sgRNA.efficiency)
int(rank(-wt$sgRNA.efficiency))
as.integer(rank(-wt$sgRNA.efficiency))
as.integer(rank(-wt$sgRNA.efficiency, ties.method = "first"))
as.integer(rank(-wt$sgRNA.efficiency, ties.method = "min"))
as.integer(rank(-wt$sgRNA.efficiency, ties.method = "average"))
as.integer(rank(-wt$sgRNA.efficiency, ties.method = "min"))
wt$rank<-as.integer(rank(-wt$sgRNA.efficiency, ties.method = "min"))
wt[2,]
rank_function<-function(data){
data[order(data[,2], decreaing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
return(data)
}
wt<-rank_function(wt)
wt<-read.delim(file.path(dir,"Cas9_wt_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)[,c(4,14)]
esp<-read.delim(file.path(dir,"Cas9_esp_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)[,c(4,14)]
HF1<-read.delim(file.path(dir,"Cas9_HF1_wang.tsv"), header = T, sep = "\t",stringsAsFactors = F)[,c(4,14)]
wt_rank<-rank_function(wt)
data=wtq
data=wt
data[order(data[,2], decreaing=T),]
data[,2]
data
data[,2]
is.na(wt$sgRNA.efficiency)
table(is.na(wt$sgRNA.efficiency))
ord<-order(data[,2], decreaing=T)
data[,2]
order(data[,2])
order(data[,2], decreasing = T)
rank_function<-function(data){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
return(data)
}
d<-rank_function(wt)
col(d)
colnames(d)
m<-merge(rank_function(wt), rank_function(esp), rank_function(HF1), by="sgRNA.seq")
m<-merge(rank_function(wt), rank_function(esp), rank_function(HF1), by='sgRNA.seq')
m<-merge(rank_function(wt), rank_function(esp), by='sgRNA.seq')
mlist<-list(rank_function(wt), rank_function(esp), rank_function(HF1))
colnames(mlist)
mlist<-list(rank_function(wt), rank_function(esp), rank_function(HF1))
colnames(mlist)
mlist
Reduce(function(x, y) merge(x, y, all=TRUE), mlist, accumulate = FALSE)
library(dplyr)
m<-merge(rank_function(wt), rank_function(esp), by='sgRNA.seq') %>% merge(rank_function(HF1), by='sgRNA.esp')
m<-merge(rank_function(wt), rank_function(esp), by='sgRNA.seq')
colnames(m)
m<-merge(rank_function(wt), rank_function(esp), by='sgRNA.seq') %>% merge(rank_function(HF1), by='sgRNA.seq')
colnames(m)
?merge
m<-merge(rank_function(wt), rank_function(esp), by='sgRNA.seq', suffixes = 'esp') %>% merge(rank_function(HF1), by='sgRNA.seq', suffixes = 'HF1')
colnames(m)
m<-merge(rank_function(wt), rank_function(esp), by='sgRNA.seq') %>% merge(rank_function(HF1), by='sgRNA.seq', suffixes = '.z')
colnames(m)
m<-merge(rank_function(wt), rank_function(esp), by='sgRNA.seq')
m
colnames(m)
merge(m, rank_function(HF1), by='sgRNA.seq', suffixes = '.z')
mr<-merge(m, rank_function(HF1), by='sgRNA.seq', suffixes = '.z')
colnames(mr)
mr<-merge(m, rank_function(HF1), by='sgRNA.seq', suffixes = '.w')
colnames(mr)
m<-merge(rank_function(wt), rank_function(esp), by='sgRNA.seq') %>% merge(rank_function(HF1), by='sgRNA.seq')
colnames(m)
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
colnames(data[,2])<-sprintf("%s_efficiency", prefix)
colnames(data[,3])<-sprintf("%s_rank", prefix)
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
data
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data
colnames(data[,2])<-sprintf("%s_efficiency", prefix)
prefix='wt'
colnames(data[,2])<-sprintf("%s_efficiency", prefix)
colnames(data)
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
colnames(data)[2]<-sprintf("%s_efficiency", prefix)
colnames(data)[3]<-sprintf("%s_rank", prefix)
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
colnames(m)
m
library("ggpubr")
colnames(m)
ggscatter(m, x = "wt_efficiency", y = "esp_efficiency", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_efficiency")
?ggscatter
ggscatter(m, x = "wt_efficiency", y = "esp_efficiency", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_efficiency", size=1)
ggscatter(m, x = "wt_efficiency", y = "esp_efficiency", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_efficiency", size=0.5)
ggscatter(m, x = "wt_efficiency", y = "HF1_efficiency", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "HF1_efficiency", size=0.5)
ggscatter(m, x = "wt_rank", y = "esp_rank", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_rank", size=0.5)
ggscatter(m, x = "wt_rank", y = "HF1_rank", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "HF1_rank", size=0.5)
cut(wt$sgRNA.efficiency, breaks = c(-Inf,50,Inf))
seq(5, 100)
seq(5, 100, 5)
seq(20, 100, 20)
seq(20, 99, 20)
cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
seq(10, 99, 10)
seq(5, 99, 5)
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for i in seq(2, 7){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for (i in seq(2, 7)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
m
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for (i in seq(2, 9)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
ggscatter(m, x = "wt_class2", y = "esp_class2", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype_class2", ylab = "esp_class2", size=0.5)
m
m
ggscatter(m, x = "wt_class10", y = "esp_class10", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype_class10", ylab = "esp_class10", size=0.5)
m$wt_class2 == m$esp_class2
summary(m$wt_class2 == m$esp_class2)
library(caret)
table(m$wt_class2 == m$esp_class2)
confisusionMatrix(m$wt_class2 == m$esp_class2)
confsusionMatrix(m$wt_class2 == m$esp_class2)
confusionMatrix(m$wt_class2 == m$esp_class2)
confusionMatrix
?confusionMatrix
confusionMatrix(m$wt_class2, m$esp_class2)
confusionMatrix(m$wt_class2, m$HF1_class2) #Accuracy : 0.4015
confusionMatrix(m$wt_class3, m$esp_class3) #Accuracy : 0.4015
confusionMatrix(m$wt_class3, m$HF1_class3) #Accuracy : 0.6642
confusionMatrix(m$wt_class5, m$esp_class5) #Accuracy : 0.1647
confusionMatrix(m$wt_class5, m$HF1_class5) #Accuracy : 0.4047
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,3], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,3], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,3], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,3], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,3], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,3], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for (i in seq(2, 15){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,3], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,3], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,3], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,3], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,3], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,3], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for (i in seq(2, 15)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
confusionMatrix(m$wt_rank_class2, m$esp_rank_class2) #Accuracy : 0.4015
confusionMatrix(m$wt_rank_class2, m$HF1_rank_class2) #Accuracy : 0.6642
confusionMatrix(m$wt_rank_class3, m$esp_rank_class3) #Accuracy : 0.1647
confusionMatrix(m$wt_rank_class3, m$HF1_rank_class3) #Accuracy : 0.4047
confusionMatrix(m$wt_rank_class4, m$esp_rank_class4) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class4, m$HF1_rank_class4) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class5, m$esp_rank_class5) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class5, m$HF1_rank_class5) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class10, m$esp_rank_class10) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class10, m$HF1_rank_class10) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class20, m$esp_rank_class20) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class20, m$HF1_rank_class20) #Accuracy : 0.9978
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,3], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,3], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,3], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,3], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,3], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,3], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class100<-cut(data[,3], breaks = c(-Inf,seq(1, 99, 1),Inf))
p_col<-colnames(data)
for (i in seq(2, 16)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
confusionMatrix(m$wt_rank_class100, m$esp_rank_class100) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class100, m$HF1_rank_class100) #Accuracy : 0.9968
trunc(rank(-data[,2], ties.method='min')/length(x)*100)
trunc(rank(-data[,2], ties.method='min')/length(data[,2])*100)
#trunc(rank(-data[,2], ties.method='min')/length(data[,2])*100)
rank(-data[,2], ties.method='min')
rank(-data[,2], ties.method='min')/length(data[,2])*100
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$p.rank<-rank(-data[,2], ties.method='min')/length(data[,2])*100
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,4], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,4], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,4], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,4], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,4], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,4], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class100<-cut(data[,4], breaks = c(-Inf,seq(1, 99, 1),Inf))
p_col<-colnames(data)
for (i in seq(2, 17)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
m
ggscatter(m, x = "wt_p.rank", y = "esp_p.rank", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_prank", size=0.5)
ggscatter(m, x = "wt_rank", y = "esp_rank", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_rank", size=0.5)
confusionMatrix(m$wt_rank_class2, m$esp_rank_class2) #Accuracy : 0.9986
confusionMatrix(m$wt_rank_class2, m$HF1_rank_class2) #Accuracy : 0.9984
confusionMatrix(m$wt_rank_class3, m$esp_rank_class3) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class3, m$HF1_rank_class3) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class4, m$esp_rank_class4) #Accuracy : 0.9977
confusionMatrix(m$wt_rank_class4, m$HF1_rank_class4) #Accuracy : 0.9975
confusionMatrix(m$wt_rank_class5, m$esp_rank_class5) #Accuracy : 0.9975
confusionMatrix(m$wt_rank_class5, m$HF1_rank_class5) #Accuracy : 0.9974
confusionMatrix(m$wt_rank_class10, m$esp_rank_class10) #Accuracy : 0.9973
confusionMatrix(m$wt_rank_class10, m$HF1_rank_class10) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class20, m$esp_rank_class20) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class20, m$HF1_rank_class20) #Accuracy : 0.9968
confusionMatrix(m$wt_rank_class100, m$esp_rank_class100) #Accuracy : 0.9969
confusionMatrix(m$wt_rank_class100, m$HF1_rank_class100) #Accuracy : 0.9967
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(m$HF1_sgRNA.efficiency, type='l', col='red')
density(m$HF1_sgRNA.efficiency)
lines(density(m$HF1_sgRNA.efficiency), type='l', col='red')
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(density(m$HF1_sgRNA.efficiency), type='l', col='red')
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
####################################################################################################################################################################
hist(density(m$wt_sgRNA.efficiency))
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(x = density(m$HF1_sgRNA.efficiency), type='l', col='red')
density(m$HF1_sgRNA.efficiency)
m$HF1_sgRNA.efficiency
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
m$HF1_sgRNA.efficiency
density(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
density(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency, prob=TRUE)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency, prob=TRUE)
lines(density(m$esp_sgRNA.efficiency),col='blue', lwd=2)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
legend('topright', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_sgRNA.efficiency, prob=TRUE, xlab="Wildtype", main = "Efficiency")
lines(density(m$esp_sgRNA.efficiency),col='blue', lwd=2)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_rank),col='blue', lwd=2)
lines(density(m$HF1_rank),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_p.rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_p.rank),col='blue', lwd=2)
lines(density(m$HF1_p.rank),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_p.rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_p.rank),col='blue', lwd=2)
lines(density(m$HF1_p.rank),col='red', lwd=2)
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
data<-list.files(directory_path="./data/1.deg", pattern="*.tsv")
?list.files
data<-list.files(path="./data/1.deg", pattern="*.tsv")
fi<-list.files(path="./data/1.deg", pattern="*.tsv")
data<-lapply(fi, read.csv)
fi<-list.files(path="./data/1.deg", pattern="*.tsv", full.names=TRUE)
data<-lapply(fi, read.csv)
data[0]
data[[0]]
data[[1]]
data<-lapply(fi, read.csv, sep='\t')
data[[1]]
data<-lapply(fi, read.csv, sep='\t')
data[[1]]
data[[2]]
data[[3]]
data[[4]]
data[[3]].head
head(data[[3]])
len(data)
length(data)
data[[1]][["t"]]
library(devtools)
devtools::install_github('tengfei-emory/scBatch')
#2. Batch effct remove
library(scBatch)
#2. Batch effct remove
library(edgeR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
