data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,3], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,3], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,3], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,3], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,3], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,3], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class100<-cut(data[,3], breaks = c(-Inf,seq(1, 99, 1),Inf))
p_col<-colnames(data)
for (i in seq(2, 16)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
confusionMatrix(m$wt_rank_class100, m$esp_rank_class100) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class100, m$HF1_rank_class100) #Accuracy : 0.9968
trunc(rank(-data[,2], ties.method='min')/length(x)*100)
trunc(rank(-data[,2], ties.method='min')/length(data[,2])*100)
#trunc(rank(-data[,2], ties.method='min')/length(data[,2])*100)
rank(-data[,2], ties.method='min')
rank(-data[,2], ties.method='min')/length(data[,2])*100
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$p.rank<-rank(-data[,2], ties.method='min')/length(data[,2])*100
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,4], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,4], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,4], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,4], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,4], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,4], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class100<-cut(data[,4], breaks = c(-Inf,seq(1, 99, 1),Inf))
p_col<-colnames(data)
for (i in seq(2, 17)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
m
ggscatter(m, x = "wt_p.rank", y = "esp_p.rank", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_prank", size=0.5)
ggscatter(m, x = "wt_rank", y = "esp_rank", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_rank", size=0.5)
confusionMatrix(m$wt_rank_class2, m$esp_rank_class2) #Accuracy : 0.9986
confusionMatrix(m$wt_rank_class2, m$HF1_rank_class2) #Accuracy : 0.9984
confusionMatrix(m$wt_rank_class3, m$esp_rank_class3) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class3, m$HF1_rank_class3) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class4, m$esp_rank_class4) #Accuracy : 0.9977
confusionMatrix(m$wt_rank_class4, m$HF1_rank_class4) #Accuracy : 0.9975
confusionMatrix(m$wt_rank_class5, m$esp_rank_class5) #Accuracy : 0.9975
confusionMatrix(m$wt_rank_class5, m$HF1_rank_class5) #Accuracy : 0.9974
confusionMatrix(m$wt_rank_class10, m$esp_rank_class10) #Accuracy : 0.9973
confusionMatrix(m$wt_rank_class10, m$HF1_rank_class10) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class20, m$esp_rank_class20) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class20, m$HF1_rank_class20) #Accuracy : 0.9968
confusionMatrix(m$wt_rank_class100, m$esp_rank_class100) #Accuracy : 0.9969
confusionMatrix(m$wt_rank_class100, m$HF1_rank_class100) #Accuracy : 0.9967
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(m$HF1_sgRNA.efficiency, type='l', col='red')
density(m$HF1_sgRNA.efficiency)
lines(density(m$HF1_sgRNA.efficiency), type='l', col='red')
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(density(m$HF1_sgRNA.efficiency), type='l', col='red')
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
####################################################################################################################################################################
hist(density(m$wt_sgRNA.efficiency))
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(x = density(m$HF1_sgRNA.efficiency), type='l', col='red')
density(m$HF1_sgRNA.efficiency)
m$HF1_sgRNA.efficiency
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
m$HF1_sgRNA.efficiency
density(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
density(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency, prob=TRUE)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency, prob=TRUE)
lines(density(m$esp_sgRNA.efficiency),col='blue', lwd=2)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
legend('topright', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_sgRNA.efficiency, prob=TRUE, xlab="Wildtype", main = "Efficiency")
lines(density(m$esp_sgRNA.efficiency),col='blue', lwd=2)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_rank),col='blue', lwd=2)
lines(density(m$HF1_rank),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_p.rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_p.rank),col='blue', lwd=2)
lines(density(m$HF1_p.rank),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_p.rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_p.rank),col='blue', lwd=2)
lines(density(m$HF1_p.rank),col='red', lwd=2)
#2. #remove the batch effect
library(edgeR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
install.packages("locfit")
install.packages("locfit")
install.packages("installr")
library(installr)
check.for.updates.R()
install.R()
# cran.packages <- c('knitr', 'xtable', 'ggplot2', 'vegan', 'cluster', 'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
#
# bioconductor.packages <- c('sva', 'limma', 'AgiMicroRna', 'variancePartition', 'pvca', 'mixOmics')
# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# BiocManager::install(bioconductor.packages)
#
# install.packages("remotes")
# remotes::install_github("ajabadi/mixOmics2")
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(pheatmap) # heatmap
# library(vegan) # RDA
# library(AgiMicroRna) # RLE plot
# library(cluster) # silhouette coefficient
# library(variancePartition) # variance calculation
# library(pvca) # PVCA
# library(ruv) # RUVIII
# library(lmerTest) # lmer
#0. Data load
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
# source(file = './code/Functions.R')
fpkm<-read.delim("./data/fpkm.tsv", sep='\t')
rownames(fpkm)<-fpkm$GeneSymbol
fpkm<-as.matrix(fpkm[-1])
#1.Log transform
log_fpkm = logratio.transfo(fpkm, logratio = "CLR", offset=1e-6) #CLR (centered log ratio transformation)
class(log_fpkm) = 'matrix'
#2.Batch effect correction
fpkm.pca.before <- pca(log_fpkm, ncomp = 3)
replicates = c(rep(1,3),rep(2,3),rep(3,4),rep(4,5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
experiment = c(rep("inhouse",10),rep("publish_data",5))
library<-factor(experiment)
names(library) = colnames(fpkm)
#
# Scatter_Density(mat = pca.before$variates$X, B = batch, T = library, E = pca.before$explained_variance,
#                 xlim = c(-4.5,5), ylim = c(-3,4),
#                 batch.legend.title = 'Cell type (batch)',
#                 trt.legend.title = 'Experiment (trt)',
#                 title = 'Before batch effect correction')
fpkm.mod <- model.matrix( ~ library) # full model
fpkm.mod0 <- model.matrix( ~ 1, data = library) # null model
fpkm.sva.n <- num.sv(dat = log_fpkm, mod = fpkm.mod) #variables in rows and samples in columns
#To estimate the surrogate variables with both full and null models
fpkm.sva <- sva(dat = log_fpkm, mod = fpkm.mod, mod0 = fpkm.mod0, n.sv = fpkm.sva.n)
#Number of significant surrogate variables is:  3
#Estimated surrogate variables in both the null and full models
fpkm.mod.bat <- cbind(fpkm.mod, fpkm.sva$sv)
fpkm.mod0.bat <- cbind(fpkm.mod0, fpkm.sva$sv)
#Calculate parametric F-test P-values and Q-values (adjusted P-values)
fpkm.sva.trt_p <- f.pvalue(log_fpkm, fpkm.mod.bat, fpkm.mod0.bat)
fpkm.sva.trt_adjp <- p.adjust(fpkm.sva.trt_p, method='fdr')
#removeBatchEffect is a function implemented in the LIMMA package that fits a linear model
# + for each variable given a series of conditions as explanatory variables,
# + including the batch effect and treatment effect.
fpkm.limma <- removeBatchEffect(log_fpkm, batch = batch, design = fpkm.mod)
#3. Evaluation of batch removed data
fpkm.pca.limma = pca(fpkm.limma, ncomp = 3)
grid.arrange(fpkm.pcm.before, fpkm.pca.limma)
grid.arrange(fpkm.pca.before, fpkm.pca.limma)
fpkm.pca.before
fpkm.pca.limma
library(gridExtra) # PCA sample plot with density
source(file = './code/Functions.R')
Scatter_Density(mat = pca.before$variates$X, B = batch, T = library, E = pca.before$explained_variance,
xlim = c(-4.5,5), ylim = c(-3,4),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = pca.before$explained_variance,
xlim = c(-4.5,5), ylim = c(-3,4),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-4.5,5), ylim = c(-3,4),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
#2.Batch effect correction
fpkm.pca.before <- pca(log_fpkm, ncomp = 3)
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-4.5,5), ylim = c(-3,4),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
fpkm.pca.limma
as.data.frame(fpkm.pca.limma$variates$X)
fpkm.pca.before <- pca(t(log_fpkm), ncomp = 3)
fpkm.pca.before$variates$X
source(file = './code/Functions.R')
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-4.5,5), ylim = c(-3,4),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
boxplot(fpkm.pca.before$variates$X)
fpkm.pca.before <- pca(t(log_fpkm), ncomp = 2)
fpkm.pca.before$variates$X
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-200,400), ylim = c(-400,200),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
batch
replicates
names(batch)
colnames(fpkm)
batch
replicates = c(rep(1,3),rep(2,3),rep(3,4),rep(4,5))
batch<-factor(replicates)
batch
colnames(fpkm)
batch<-factor(colnames(fpkm))
batch
names(batch) = replicates
batch
replicates = c(rep("N-RO",3),rep("M-RBO",3),rep("Y79",4),rep("RSC",5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
batch
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-200,400), ylim = c(-400,200),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
# cran.packages <- c('knitr', 'xtable', 'ggplot2', 'vegan', 'cluster', 'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
#
# bioconductor.packages <- c('sva', 'limma', 'AgiMicroRna', 'variancePartition', 'pvca', 'mixOmics')
# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# BiocManager::install(bioconductor.packages)
#
# install.packages("remotes")
# remotes::install_github("ajabadi/mixOmics2")
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(pheatmap) # heatmap
# library(vegan) # RDA
# library(AgiMicroRna) # RLE plot
# library(cluster) # silhouette coefficient
# library(variancePartition) # variance calculation
# library(pvca) # PVCA
# library(ruv) # RUVIII
# library(lmerTest) # lmer
#0. Data load
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
source(file = './code/Functions.R')
fpkm<-read.delim("./data/fpkm.tsv", sep='\t')
rownames(fpkm)<-fpkm$GeneSymbol
fpkm<-as.matrix(fpkm[-1])
#1.Log transform
log_fpkm = logratio.transfo(fpkm, logratio = "CLR", offset=1e-6) #CLR (centered log ratio transformation)
class(log_fpkm) = 'matrix'
#2.Batch effect correction
fpkm.pca.before <- pca(t(log_fpkm), ncomp = 2)
replicates = c(rep("N-RO",3),rep("M-RBO",3),rep("Y79",4),rep("RSC",5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
experiment = c(rep("inhouse",10),rep("publish_data",5))
library<-factor(experiment)
names(library) = colnames(fpkm)
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-200,400), ylim = c(-400,200),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-200,400), ylim = c(-400,200),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
# cran.packages <- c('knitr', 'xtable', 'ggplot2', 'vegan', 'cluster', 'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
#
# bioconductor.packages <- c('sva', 'limma', 'AgiMicroRna', 'variancePartition', 'pvca', 'mixOmics')
# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# BiocManager::install(bioconductor.packages)
#
# install.packages("remotes")
# remotes::install_github("ajabadi/mixOmics2")
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(pheatmap) # heatmap
# library(vegan) # RDA
# library(AgiMicroRna) # RLE plot
# library(cluster) # silhouette coefficient
# library(variancePartition) # variance calculation
# library(pvca) # PVCA
# library(ruv) # RUVIII
# library(lmerTest) # lmer
#0. Data load
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
source(file = './code/Functions.R')
fpkm<-read.delim("./data/fpkm.tsv", sep='\t')
rownames(fpkm)<-fpkm$GeneSymbol
fpkm<-as.matrix(fpkm[-1])
#1.Log transform
log_fpkm = logratio.transfo(fpkm, logratio = "CLR", offset=1e-6) #CLR (centered log ratio transformation)
class(log_fpkm) = 'matrix'
#2.Batch effect correction
fpkm.pca.before <- pca(t(log_fpkm), ncomp = 2)
replicates = c(rep("N-RO",3),rep("M-RBO",3),rep("Y79",4),rep("RSC",5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
experiment = c(rep("inhouse",10),rep("publish_data",5))
library<-factor(experiment)
names(library) = colnames(fpkm)
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-200,400), ylim = c(-400,200),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
# cran.packages <- c('knitr', 'xtable', 'ggplot2', 'vegan', 'cluster', 'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
#
# bioconductor.packages <- c('sva', 'limma', 'AgiMicroRna', 'variancePartition', 'pvca', 'mixOmics')
# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# BiocManager::install(bioconductor.packages)
#
# install.packages("remotes")
# remotes::install_github("ajabadi/mixOmics2")
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(pheatmap) # heatmap
# library(vegan) # RDA
# library(AgiMicroRna) # RLE plot
# library(cluster) # silhouette coefficient
# library(variancePartition) # variance calculation
# library(pvca) # PVCA
# library(ruv) # RUVIII
# library(lmerTest) # lmer
#0. Data load
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
source(file = './code/Functions.R')
fpkm<-read.delim("./data/fpkm.tsv", sep='\t')
rownames(fpkm)<-fpkm$GeneSymbol
fpkm<-as.matrix(fpkm[-1])
#1.Log transform
log_fpkm = logratio.transfo(fpkm, logratio = "CLR", offset=1e-6) #CLR (centered log ratio transformation)
class(log_fpkm) = 'matrix'
#2.Batch effect correction
fpkm.pca.before <- pca(t(log_fpkm), ncomp = 2)
replicates = c(rep("N-RO",3),rep("M-RBO",3),rep("Y79",4),rep("RSC",5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
experiment = c(rep("inhouse",10),rep("publish_data",5))
library<-factor(experiment)
names(library) = colnames(fpkm)
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-200,400), ylim = c(-400,200),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
# cran.packages <- c('knitr', 'xtable', 'ggplot2', 'vegan', 'cluster', 'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
#
# bioconductor.packages <- c('sva', 'limma', 'AgiMicroRna', 'variancePartition', 'pvca', 'mixOmics')
# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# BiocManager::install(bioconductor.packages)
#
# install.packages("remotes")
# remotes::install_github("ajabadi/mixOmics2")
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(pheatmap) # heatmap
# library(vegan) # RDA
# library(AgiMicroRna) # RLE plot
# library(cluster) # silhouette coefficient
# library(variancePartition) # variance calculation
# library(pvca) # PVCA
# library(ruv) # RUVIII
# library(lmerTest) # lmer
#0. Data load
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
source(file = './code/Functions.R')
fpkm<-read.delim("./data/fpkm.tsv", sep='\t')
rownames(fpkm)<-fpkm$GeneSymbol
fpkm<-as.matrix(fpkm[-1])
#1.Log transform
log_fpkm = logratio.transfo(fpkm, logratio = "CLR", offset=1e-6) #CLR (centered log ratio transformation)
class(log_fpkm) = 'matrix'
#2.Batch effect correction
fpkm.pca.before <- pca(t(log_fpkm), ncomp = 2)
replicates = c(rep("N-RO",3),rep("M-RBO",3),rep("Y79",4),rep("RSC",5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
experiment = c(rep("inhouse",10),rep("publish_data",5))
library<-factor(experiment)
names(library) = colnames(fpkm)
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-200,400), ylim = c(-400,200),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
# cran.packages <- c('knitr', 'xtable', 'ggplot2', 'vegan', 'cluster', 'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
#
# bioconductor.packages <- c('sva', 'limma', 'AgiMicroRna', 'variancePartition', 'pvca', 'mixOmics')
# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# BiocManager::install(bioconductor.packages)
#
# install.packages("remotes")
# remotes::install_github("ajabadi/mixOmics2")
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(pheatmap) # heatmap
# library(vegan) # RDA
# library(AgiMicroRna) # RLE plot
# library(cluster) # silhouette coefficient
# library(variancePartition) # variance calculation
# library(pvca) # PVCA
# library(ruv) # RUVIII
# library(lmerTest) # lmer
#0. Data load
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
source(file = './code/Functions.R')
fpkm<-read.delim("./data/fpkm.tsv", sep='\t')
rownames(fpkm)<-fpkm$GeneSymbol
fpkm<-as.matrix(fpkm[-1])
#1.Log transform
log_fpkm = logratio.transfo(fpkm, logratio = "CLR", offset=1e-6) #CLR (centered log ratio transformation)
class(log_fpkm) = 'matrix'
#2.Batch effect correction
fpkm.pca.before <- pca(t(log_fpkm), ncomp = 2)
replicates = c(rep("N-RO",3),rep("M-RBO",3),rep("Y79",4),rep("RSC",5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
experiment = c(rep("inhouse",10),rep("publish_data",5))
library<-factor(experiment)
names(library) = colnames(fpkm)
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance,
xlim = c(-200,400), ylim = c(-400,200),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
fpkm.limma
fpkm.pca.limma
fpkm.pca.limma$variates$X
#3. Evaluation of batch removed data
fpkm.pca.limma = pca(t(fpkm.limma), ncomp = 2)
fpkm.pca.limma
fpkm.pca.limma$variates$X
grid.arrange(fpkm.pca.plot.before, fpkm.pca.plot.limma, ncol=2)
fpkm.pca.limma = pca(t(fpkm.limma), ncomp = 2)
fpkm.pca.plot.before <- Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$explained_variance, xlim = c(-200,400), ylim = c(-400,200), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Before batch effect correction')
fpkm.pca.plot.limma <- Scatter_Density(mat = fpkm.pca.limma$variates$X, B = batch, T = library, E = fpkm.pca.limma$explained_variance, xlim = c(-400,600), ylim = c(-200,300), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with rBE')
grid.arrange(fpkm.pca.plot.before, fpkm.pca.plot.limma, ncol=2)
