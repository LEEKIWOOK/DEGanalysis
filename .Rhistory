data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for (i in seq(2, 7)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
m
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for (i in seq(2, 9)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
ggscatter(m, x = "wt_class2", y = "esp_class2", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype_class2", ylab = "esp_class2", size=0.5)
m
m
ggscatter(m, x = "wt_class10", y = "esp_class10", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype_class10", ylab = "esp_class10", size=0.5)
m$wt_class2 == m$esp_class2
summary(m$wt_class2 == m$esp_class2)
library(caret)
table(m$wt_class2 == m$esp_class2)
confisusionMatrix(m$wt_class2 == m$esp_class2)
confsusionMatrix(m$wt_class2 == m$esp_class2)
confusionMatrix(m$wt_class2 == m$esp_class2)
confusionMatrix
?confusionMatrix
confusionMatrix(m$wt_class2, m$esp_class2)
confusionMatrix(m$wt_class2, m$HF1_class2) #Accuracy : 0.4015
confusionMatrix(m$wt_class3, m$esp_class3) #Accuracy : 0.4015
confusionMatrix(m$wt_class3, m$HF1_class3) #Accuracy : 0.6642
confusionMatrix(m$wt_class5, m$esp_class5) #Accuracy : 0.1647
confusionMatrix(m$wt_class5, m$HF1_class5) #Accuracy : 0.4047
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,3], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,3], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,3], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,3], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,3], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,3], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for (i in seq(2, 15){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,3], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,3], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,3], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,3], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,3], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,3], breaks = c(-Inf,seq(5, 99, 5),Inf))
p_col<-colnames(data)
for (i in seq(2, 15)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
confusionMatrix(m$wt_rank_class2, m$esp_rank_class2) #Accuracy : 0.4015
confusionMatrix(m$wt_rank_class2, m$HF1_rank_class2) #Accuracy : 0.6642
confusionMatrix(m$wt_rank_class3, m$esp_rank_class3) #Accuracy : 0.1647
confusionMatrix(m$wt_rank_class3, m$HF1_rank_class3) #Accuracy : 0.4047
confusionMatrix(m$wt_rank_class4, m$esp_rank_class4) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class4, m$HF1_rank_class4) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class5, m$esp_rank_class5) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class5, m$HF1_rank_class5) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class10, m$esp_rank_class10) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class10, m$HF1_rank_class10) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class20, m$esp_rank_class20) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class20, m$HF1_rank_class20) #Accuracy : 0.9978
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,3], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,3], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,3], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,3], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,3], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,3], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class100<-cut(data[,3], breaks = c(-Inf,seq(1, 99, 1),Inf))
p_col<-colnames(data)
for (i in seq(2, 16)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
confusionMatrix(m$wt_rank_class100, m$esp_rank_class100) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class100, m$HF1_rank_class100) #Accuracy : 0.9968
trunc(rank(-data[,2], ties.method='min')/length(x)*100)
trunc(rank(-data[,2], ties.method='min')/length(data[,2])*100)
#trunc(rank(-data[,2], ties.method='min')/length(data[,2])*100)
rank(-data[,2], ties.method='min')
rank(-data[,2], ties.method='min')/length(data[,2])*100
rank_function<-function(data, prefix){
data[order(data[,2], decreasing=T),]
data$rank<-as.integer(rank(-data[,2], ties.method="min"))
data$p.rank<-rank(-data[,2], ties.method='min')/length(data[,2])*100
data$class2<-cut(data[,2], breaks = c(-Inf,50,Inf))
data$class3<-cut(data[,2], breaks = c(-Inf,33,66,Inf))
data$class4<-cut(data[,2], breaks = c(-Inf,25,50,75,Inf))
data$class5<-cut(data[,2], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$class10<-cut(data[,2], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$class20<-cut(data[,2], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class2<-cut(data[,4], breaks = c(-Inf,50,Inf))
data$rank_class3<-cut(data[,4], breaks = c(-Inf,33, 66,Inf))
data$rank_class4<-cut(data[,4], breaks = c(-Inf,25,50,75,Inf))
data$rank_class5<-cut(data[,4], breaks = c(-Inf,seq(20, 99, 20),Inf))
data$rank_class10<-cut(data[,4], breaks = c(-Inf,seq(10, 99, 10),Inf))
data$rank_class20<-cut(data[,4], breaks = c(-Inf,seq(5, 99, 5),Inf))
data$rank_class100<-cut(data[,4], breaks = c(-Inf,seq(1, 99, 1),Inf))
p_col<-colnames(data)
for (i in seq(2, 17)){
colnames(data)[i]<-sprintf("%s_%s", prefix, p_col[i])
}
return(data)
}
m<-merge(rank_function(wt, 'wt'), rank_function(esp, 'esp'), by='sgRNA.seq') %>% merge(rank_function(HF1, 'HF1'), by='sgRNA.seq')
m
ggscatter(m, x = "wt_p.rank", y = "esp_p.rank", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_prank", size=0.5)
ggscatter(m, x = "wt_rank", y = "esp_rank", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab = "wildtype", ylab = "esp_rank", size=0.5)
confusionMatrix(m$wt_rank_class2, m$esp_rank_class2) #Accuracy : 0.9986
confusionMatrix(m$wt_rank_class2, m$HF1_rank_class2) #Accuracy : 0.9984
confusionMatrix(m$wt_rank_class3, m$esp_rank_class3) #Accuracy : 0.9981
confusionMatrix(m$wt_rank_class3, m$HF1_rank_class3) #Accuracy : 0.9978
confusionMatrix(m$wt_rank_class4, m$esp_rank_class4) #Accuracy : 0.9977
confusionMatrix(m$wt_rank_class4, m$HF1_rank_class4) #Accuracy : 0.9975
confusionMatrix(m$wt_rank_class5, m$esp_rank_class5) #Accuracy : 0.9975
confusionMatrix(m$wt_rank_class5, m$HF1_rank_class5) #Accuracy : 0.9974
confusionMatrix(m$wt_rank_class10, m$esp_rank_class10) #Accuracy : 0.9973
confusionMatrix(m$wt_rank_class10, m$HF1_rank_class10) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class20, m$esp_rank_class20) #Accuracy : 0.9971
confusionMatrix(m$wt_rank_class20, m$HF1_rank_class20) #Accuracy : 0.9968
confusionMatrix(m$wt_rank_class100, m$esp_rank_class100) #Accuracy : 0.9969
confusionMatrix(m$wt_rank_class100, m$HF1_rank_class100) #Accuracy : 0.9967
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(m$HF1_sgRNA.efficiency, type='l', col='red')
density(m$HF1_sgRNA.efficiency)
lines(density(m$HF1_sgRNA.efficiency), type='l', col='red')
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(density(m$HF1_sgRNA.efficiency), type='l', col='red')
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
####################################################################################################################################################################
hist(density(m$wt_sgRNA.efficiency))
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
lines(x = density(m$HF1_sgRNA.efficiency), type='l', col='red')
density(m$HF1_sgRNA.efficiency)
m$HF1_sgRNA.efficiency
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
m$HF1_sgRNA.efficiency
density(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
density(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency)
hist(m$HF1_sgRNA.efficiency)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency, prob=TRUE)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
####################################################################################################################################################################
hist(m$wt_sgRNA.efficiency, prob=TRUE)
lines(density(m$esp_sgRNA.efficiency),col='blue', lwd=2)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
legend('topright', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_sgRNA.efficiency, prob=TRUE, xlab="Wildtype", main = "Efficiency")
lines(density(m$esp_sgRNA.efficiency),col='blue', lwd=2)
lines(density(m$HF1_sgRNA.efficiency),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_rank),col='blue', lwd=2)
lines(density(m$HF1_rank),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_p.rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_p.rank),col='blue', lwd=2)
lines(density(m$HF1_p.rank),col='red', lwd=2)
legend('topleft', c("ESP","HF1"), fill=c('blue', 'red'))
hist(m$wt_p.rank, prob=TRUE, xlab="Wildtype", main = "Ranking")
lines(density(m$esp_p.rank),col='blue', lwd=2)
lines(density(m$HF1_p.rank),col='red', lwd=2)
#2. #remove the batch effect
library(edgeR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
install.packages("locfit")
install.packages("locfit")
install.packages("installr")
library(installr)
check.for.updates.R()
install.R()
library("sva") #Note this exercise requires sva (>= v3.36.0) which is only available for R (>= v4.x)
library("ggplot2")
library("gridExtra")
library("edgeR")
library("UpSetR")
uncorrected_data = read.table("./data/temp/GSE48035_ILMN.Counts.SampleSubset.ProteinCodingGenes.tsv", header=TRUE, sep="\t", as.is=c(1,2))
#simplify the names of the data columns
# (A = Universal Human Reference RNA and B = Human Brain Reference RNA)
# RNA = polyA enrichment and RIBO = ribosomal RNA depletion
# 1, 2, 3, 4 are replicates
names(uncorrected_data) = c("Gene", "Chr", "UHR_Ribo_1", "UHR_Ribo_2", "UHR_Ribo_3", "UHR_Ribo_4", "HBR_Ribo_1", "HBR_Ribo_2", "HBR_Ribo_3", "HBR_Ribo_4",
"UHR_Poly_1", "UHR_Poly_2", "UHR_Poly_3", "UHR_Poly_4", "HBR_Poly_1", "HBR_Poly_2", "HBR_Poly_3", "HBR_Poly_4")
sample_names = names(uncorrected_data)[3:length(names(uncorrected_data))]
#review data structure
head(uncorrected_data)
dim(uncorrected_data)
#define conditions, library methods, and replicates
conditions = c("UHR", "UHR", "UHR", "UHR", "HBR", "HBR", "HBR", "HBR", "UHR", "UHR", "UHR", "UHR", "HBR", "HBR", "HBR", "HBR")
library_methods = c("Ribo", "Ribo", "Ribo", "Ribo", "Ribo", "Ribo", "Ribo", "Ribo", "Poly", "Poly", "Poly", "Poly", "Poly", "Poly", "Poly", "Poly")
replicates = c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)
#calculate principal components for the uncorrected data
pca_uncorrected_obj = prcomp(uncorrected_data[,sample_names])
#pull PCA values out of the PCA object
pca_uncorrected = as.data.frame(pca_uncorrected_obj[2]$rotation)
#assign labels to the data frame
pca_uncorrected[,"condition"] = conditions
pca_uncorrected[,"library_method"] = library_methods
pca_uncorrected[,"replicate"] = replicates
#plot the PCA
#create a classic 2-dimension PCA plot (first two principal components) with conditions and library methods indicated
cols <- c("UHR" = "#481567FF", "HBR" = "#1F968BFF")
p1 = ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=library_method))
p1 = p1 + geom_point(size=3)
p1 = p1 + stat_ellipse(type="norm", linetype=2)
p1 = p1 + labs(title="PCA, RNA-seq counts for 16 HBR/UHR and Ribo/PolyA samples (uncorrected data)", color="Condition", shape="Library Method")
p1 = p1 + scale_colour_manual(values = cols)
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression/data/temp")
library("sva") #Note this exercise requires sva (>= v3.36.0) which is only available for R (>= v4.x)
library("ggplot2")
library("gridExtra")
library("edgeR")
library("UpSetR")
uncorrected_data = read.table("GSE48035_ILMN.Counts.SampleSubset.ProteinCodingGenes.tsv", header=TRUE, sep="\t", as.is=c(1,2))
#simplify the names of the data columns
# (A = Universal Human Reference RNA and B = Human Brain Reference RNA)
# RNA = polyA enrichment and RIBO = ribosomal RNA depletion
# 1, 2, 3, 4 are replicates
names(uncorrected_data) = c("Gene", "Chr", "UHR_Ribo_1", "UHR_Ribo_2", "UHR_Ribo_3", "UHR_Ribo_4", "HBR_Ribo_1", "HBR_Ribo_2", "HBR_Ribo_3", "HBR_Ribo_4",
"UHR_Poly_1", "UHR_Poly_2", "UHR_Poly_3", "UHR_Poly_4", "HBR_Poly_1", "HBR_Poly_2", "HBR_Poly_3", "HBR_Poly_4")
sample_names = names(uncorrected_data)[3:length(names(uncorrected_data))]
#review data structure
head(uncorrected_data)
dim(uncorrected_data)
#define conditions, library methods, and replicates
conditions = c("UHR", "UHR", "UHR", "UHR", "HBR", "HBR", "HBR", "HBR", "UHR", "UHR", "UHR", "UHR", "HBR", "HBR", "HBR", "HBR")
library_methods = c("Ribo", "Ribo", "Ribo", "Ribo", "Ribo", "Ribo", "Ribo", "Ribo", "Poly", "Poly", "Poly", "Poly", "Poly", "Poly", "Poly", "Poly")
replicates = c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)
#calculate principal components for the uncorrected data
pca_uncorrected_obj = prcomp(uncorrected_data[,sample_names])
#pull PCA values out of the PCA object
pca_uncorrected = as.data.frame(pca_uncorrected_obj[2]$rotation)
#assign labels to the data frame
pca_uncorrected[,"condition"] = conditions
pca_uncorrected[,"library_method"] = library_methods
pca_uncorrected[,"replicate"] = replicates
#plot the PCA
#create a classic 2-dimension PCA plot (first two principal components) with conditions and library methods indicated
cols <- c("UHR" = "#481567FF", "HBR" = "#1F968BFF")
p1 = ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=library_method))
p1 = p1 + geom_point(size=3)
p1 = p1 + stat_ellipse(type="norm", linetype=2)
p1 = p1 + labs(title="PCA, RNA-seq counts for 16 HBR/UHR and Ribo/PolyA samples (uncorrected data)", color="Condition", shape="Library Method")
p1 = p1 + scale_colour_manual(values = cols)
#first we need to transform the format of our groups and batches from names (e.g. "UHR", "HBR", etc.) to numbers (e.g. 1, 2, etc.)
#in the command below "sapply" is used to apply the "switch" command to each element and convert names to numbers as we define
groups = sapply(as.character(conditions), switch, "UHR" = 1, "HBR" = 2, USE.NAMES = F)
groups
batches = sapply(as.character(library_methods), switch, "Ribo" = 1, "Poly" = 2, USE.NAMES = F)
batches
?contrasts.fit
M <- matrix(rnorm(100*6,sd=0.3),100,6)
M[1,1:3] <- M[1,1:3] + 2
#  Design matrix corresponds to oneway layout, columns are orthogonal
design <- cbind(First3Arrays=c(1,1,1,0,0,0),Last3Arrays=c(0,0,0,1,1,1))
fit <- lmFit(M,design=design)
#  Would like to consider original two estimates plus difference between first 3 and last 3 arrays
contrast.matrix <- cbind(First3=c(1,0),Last3=c(0,1),"Last3-First3"=c(-1,1))
fit2 <- contrasts.fit(fit,contrast.matrix)
fit2 <- eBayes(fit2)
#  Large values of eb$t indicate differential expression
results <- decideTests(fit2, method="nestedF")
vennCounts(results)
M
?ComBat
#ComBat(dat = log_fpkm, batch = )
batches
# cran.packages <- c('knitr', 'xtable', 'ggplot2', 'vegan', 'cluster', 'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
#
# bioconductor.packages <- c('sva', 'limma', 'AgiMicroRna', 'variancePartition', 'pvca', 'mixOmics')
# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# BiocManager::install(bioconductor.packages)
#
# install.packages("remotes")
# remotes::install_github("ajabadi/mixOmics2")
####################################################################################
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(pheatmap) # heatmap
#0. Data load
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
source(file = './code/Functions.R')
fpkm<-read.delim("./data/fpkm.tsv", sep='\t')
rownames(fpkm)<-fpkm$GeneSymbol
fpkm<-as.matrix(fpkm[-1])
####################################################################################
#1.Log transform
log_fpkm = logratio.transfo(fpkm, logratio = "CLR", offset=1e-6) #CLR (centered log ratio transformation)
class(log_fpkm) = 'matrix'
####################################################################################
#2.Batch effect detection
replicates = c(rep("N-RO",3),rep("M-RBO",3),rep("RSC",4),rep("Y79",5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
experiment = rep("inhouse",15)
library<-factor(experiment)
names(library) = colnames(fpkm)
fpkm.pca.before <- pca(t(log_fpkm), ncomp = ncol(log_fpkm), scale=TRUE, multilevel = replicates, center = TRUE)
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$prop_expl_var$X,
xlim = c(-150,150), ylim = c(-150,150),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
####################################################################################
#3.Batch effect correction
d = data.frame(batch = as.integer(batch))
rownames(d) = colnames(fpkm)
#fpkm.mod <- model.matrix( ~ d) # full model
fpkm.mod <- model.matrix(~batch, data = d) # full model
fpkm.mod0 <- model.matrix( ~ 1, data = d) # null model
fpkm.sva.n <- num.sv(dat = log_fpkm, mod = fpkm.mod, method = "leek") #variables in rows and samples in columns
#To estimate the surrogate variables with both full and null models
fpkm.sva <- sva(dat = log_fpkm, mod = fpkm.mod, mod0 = fpkm.mod0, n.sv = fpkm.sva.n)
#Number of significant surrogate variables is:  13
#Estimated surrogate variables in both the null and full models
fpkm.mod.bat <- cbind(fpkm.mod, fpkm.sva$sv)
fpkm.mod0.bat <- cbind(fpkm.mod0, fpkm.sva$sv)
fpkm.sva
fpkm.sva <- sva(dat = log_fpkm, mod = fpkm.mod, mod0 = fpkm.mod0, n.sv = fpkm.sva.n)
#fpkm.sva <- sva(dat = log_fpkm, mod = fpkm.mod, mod0 = fpkm.mod0, n.sv = fpkm.sva.n)
?sva
fpkm.mod
fpkm.mod0
fpkm.sva.n
?num.sv
log_fpkm
fpkm.sva <- sva(dat = log_fpkm, mod = fpkm.mod, mod0 = fpkm.mod0, n.sv = fpkm.sva.n)
fpkm.sva <- sva(dat = log_fpkm, mod = fpkm.mod, mod0 = fpkm.mod0, n.sv = 3)
fpkm.sva
?num.sv
fpkm.sva.n <- num.sv(dat = log_fpkm, mod = fpkm.mod, method = "be")
fpkm.sva.n
fpkm.sva.n <- num.sv(dat = log_fpkm, mod = fpkm.mod, method = "leek")
fpkm.sva.n
fpkm.sva.n <- num.sv(dat = log_fpkm, mod = fpkm.mod, method = "be")
?sva
fpkm.sva <- sva(dat = log_fpkm, mod = fpkm.mod, mod0 = fpkm.mod0, n.sv = fpkm.sva.n)
fpkm.sva
#Estimated surrogate variables in both the null and full models
fpkm.mod.bat <- cbind(fpkm.mod, fpkm.sva$sv)
fpkm.mod0.bat <- cbind(fpkm.mod0, fpkm.sva$sv)
fpkm.sva
?ComBat
batch
cambat_data = ComBat(dat = log_fpkm, batch = batch, mod = fpkm.mod0, par.prior = TRUE, prior.plots = TRUE)
combat_res = ComBat(dat = log_fpkm, batch = batch, mod = fpkm.mod0, par.prior = TRUE, prior.plots = TRUE)
combat_res
combat_res
fpkm.pca.combat = pca(t(combat_res), ncomp = ncol(log_fpkm), scale=TRUE, multilevel = replicates, center = TRUE)
fpkm.pca.combat
fpkm.pca.combat$variates$X
batch
# cran.packages <- c('knitr', 'xtable', 'ggplot2', 'vegan', 'cluster', 'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
#
# bioconductor.packages <- c('sva', 'limma', 'AgiMicroRna', 'variancePartition', 'pvca', 'mixOmics')
# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# BiocManager::install(bioconductor.packages)
#
# install.packages("remotes")
# remotes::install_github("ajabadi/mixOmics2")
####################################################################################
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(pheatmap) # heatmap
#0. Data load
setwd("/home/kwlee/Projects_gflas/Team_CrisprCas/RNAexpression")
source(file = './code/Functions.R')
fpkm<-read.delim("./data/fpkm.tsv", sep='\t')
rownames(fpkm)<-fpkm$GeneSymbol
fpkm<-as.matrix(fpkm[-1])
####################################################################################
#1.Log transform
log_fpkm = logratio.transfo(fpkm, logratio = "CLR", offset=1e-6) #CLR (centered log ratio transformation)
class(log_fpkm) = 'matrix'
####################################################################################
#2.Batch effect detection
replicates = c(rep("N-RO",3),rep("M-RBO",3),rep("RSC",4),rep("Y79",5))
batch<-factor(replicates)
names(batch) = colnames(fpkm)
experiment = rep("inhouse",15)
library<-factor(experiment)
names(library) = colnames(fpkm)
fpkm.pca.before <- pca(t(log_fpkm), ncomp = ncol(log_fpkm), scale=TRUE, multilevel = replicates, center = TRUE)
Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$prop_expl_var$X,
xlim = c(-150,150), ylim = c(-150,150),
batch.legend.title = 'Cell type (batch)',
trt.legend.title = 'Experiment (trt)',
title = 'Before batch effect correction')
####################################################################################
#3.Batch effect correction
d = data.frame(batch = as.integer(batch))
rownames(d) = colnames(fpkm)
#fpkm.mod <- model.matrix( ~ d) # full model
fpkm.mod <- model.matrix(~batch, data = d) # full model
fpkm.mod0 <- model.matrix( ~ 1, data = d) # null model
##################################################################################################################
#Adjusting for surrogate variables using the limma package
#fpkm.sva.n <- num.sv(dat = log_fpkm, mod = fpkm.mod, method = "leek") #variables in rows and samples in columns
fpkm.sva.n <- num.sv(dat = log_fpkm, mod = fpkm.mod, method = "be")
#To estimate the surrogate variables with both full and null models
fpkm.sva <- sva(dat = log_fpkm, mod = fpkm.mod, mod0 = fpkm.mod0, n.sv = fpkm.sva.n)
#Number of significant surrogate variables is:  13
#Estimated surrogate variables in both the null and full models
fpkm.mod.bat <- cbind(fpkm.mod, fpkm.sva$sv)
fpkm.mod0.bat <- cbind(fpkm.mod0, fpkm.sva$sv)
#Calculate parametric F-test P-values and Q-values (adjusted P-values)
fpkm.sva.trt_p <- f.pvalue(log_fpkm, fpkm.mod.bat, fpkm.mod0.bat)
fpkm.sva.trt_adjp <- p.adjust(fpkm.sva.trt_p, method='fdr')
##################################################################################################################
#removeBatchEffect is a function implemented in the LIMMA package that fits a linear model
# + for each variable given a series of conditions as explanatory variables,
# + including the batch effect and treatment effect.
fpkm.limma <- removeBatchEffect(log_fpkm, batch = batch, design = fpkm.mod)
##################################################################################################################
#Applying the ComBat function to adjust for known batches
combat_res = ComBat(dat = log_fpkm, batch = batch, mod = fpkm.mod0, par.prior = TRUE, prior.plots = TRUE)
####################################################################################
#4. Result of batch effect correction
fpkm.pca.combat = pca(t(combat_res), ncomp = ncol(log_fpkm), scale=TRUE, multilevel = replicates, center = TRUE)
fpkm.pca.plot.before <- Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$prop_expl_var$X, xlim = c(-150,150), ylim = c(-150,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Before batch effect correction')
fpkm.pca.plot.limma <- Scatter_Density(mat = fpkm.pca.limma$variates$X, B = batch, T = library, E = fpkm.pca.limma$prop_expl_var$X, xlim = c(-100,150), ylim = c(-100,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with rBE')
fpkm.pca.plot.combat <- Scatter_Density(mat = fpkm.pca.combat$variates$X, B = batch, T = library, E = fpkm.pca.combat$prop_expl_var$X, xlim = c(-100,150), ylim = c(-100,100), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with Combat')
grid.arrange(fpkm.pca.plot.before, fpkm.pca.plot.limma, fpkm.pca.plot.combat, ncol=2)
fpkm.pca.plot.before <- Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$prop_expl_var$X, xlim = c(-150,150), ylim = c(-150,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Before batch effect correction')
fpkm.pca.plot.limma <- Scatter_Density(mat = fpkm.pca.limma$variates$X, B = batch, T = library, E = fpkm.pca.limma$prop_expl_var$X, xlim = c(-100,150), ylim = c(-100,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with rBE')
fpkm.pca.plot.combat <- Scatter_Density(mat = fpkm.pca.combat$variates$X, B = batch, T = library, E = fpkm.pca.combat$prop_expl_var$X, xlim = c(-100,150), ylim = c(-100,100), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with Combat')
grid.arrange(fpkm.pca.plot.before, fpkm.pca.plot.limma, fpkm.pca.plot.combat, ncol=2)
fpkm.pca.plot.before <- Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$prop_expl_var$X, xlim = c(-150,150), ylim = c(-150,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Before batch effect correction')
fpkm.pca.plot.limma <- Scatter_Density(mat = fpkm.pca.limma$variates$X, B = batch, T = library, E = fpkm.pca.limma$prop_expl_var$X, xlim = c(-100,150), ylim = c(-100,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with rBE')
fpkm.pca.combat = pca(t(combat_res), ncomp = ncol(log_fpkm), scale=TRUE, multilevel = replicates, center = TRUE)
fpkm.pca.limma = pca(t(fpkm.limma), ncomp = ncol(log_fpkm), scale=TRUE, multilevel = replicates, center = TRUE)
fpkm.pca.plot.before <- Scatter_Density(mat = fpkm.pca.before$variates$X, B = batch, T = library, E = fpkm.pca.before$prop_expl_var$X, xlim = c(-150,150), ylim = c(-150,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Before batch effect correction')
fpkm.pca.plot.limma <- Scatter_Density(mat = fpkm.pca.limma$variates$X, B = batch, T = library, E = fpkm.pca.limma$prop_expl_var$X, xlim = c(-100,150), ylim = c(-100,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with rBE')
fpkm.pca.plot.combat <- Scatter_Density(mat = fpkm.pca.combat$variates$X, B = batch, T = library, E = fpkm.pca.combat$prop_expl_var$X, xlim = c(-100,150), ylim = c(-100,100), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with Combat')
grid.arrange(fpkm.pca.plot.before, fpkm.pca.plot.limma, fpkm.pca.plot.combat, ncol=2)
library
fpkm.pca.plot.limma <- Scatter_Density(mat = fpkm.pca.limma$variates$X, B = library, T = batch, E = fpkm.pca.limma$prop_expl_var$X, xlim = c(-100,150), ylim = c(-100,150), batch.legend.title = 'Cell type (batch)', trt.legend.title = 'Experiment (trt)', title = 'Batch correction with rBE')
